Stateless vs Stateful Components

Stateful (containers)
	class XY extends Components
	Access to State
	Lifecycle hooks
	Accesses State and Props via "this"
	
	Use this only to manage State or have access to Lifecycle Hooks
	
Stateless
	const XY = (props) => {...}
	No access to state
	No lifecycle hooks
	Accesses Props via "props"
	
	Use in all other Cases
	
	
Component Lifecycle

	These lifecycle functions are only available in Stateful Components
	- constructor()
	- componentWillMount()
	- componentWillReceiveProps()
	- shouldComponentUpdate()
	- componentWillUpdate()
	- componentDidUpdate()
	- componentDidCatch()
	- componentDidMount()
	- componentWillUnmount()
	- render()
	
	During component creation only constructor, componentWillMount, componentDidMount and render will execute.
		- Constructor is first and a default ES6 class feature. Creates component and passes on any props. 
		Use this to set up the state but do not use it to reach out to a web server. Could cause a re-rendering of the application, performance issues, and an unpredictable state.
		- componentWillMount is not used that often. Update state, last-minute optimization
		- render is clearly defines how the application should look like. Prepares and structures the JSX code. Renders all child components
		- componentDidMount allows for side-effects like calling a web server but don't update the state.